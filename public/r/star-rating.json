{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "star-rating",
  "type": "registry:component",
  "title": "Star Rating",
  "description": "A star rating component.",
  "files": [
    {
      "path": "registry/ui/star-rating.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Star } from \"lucide-react\";\n\nconst starRatingVariants = cva(\"flex items-center gap-1\", {\n  variants: {\n    size: {\n      sm: \"text-xs\",\n      md: \"text-sm\",\n      lg: \"text-base\",\n    },\n    variant: {\n      default: \"text-foreground\",\n      muted: \"text-muted-foreground\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    variant: \"default\",\n  },\n});\n\nexport interface StarRatingProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof starRatingVariants> {\n  rating: number;\n  maxRating?: number;\n  reviewCount?: number;\n  showEmpty?: boolean;\n}\n\nconst StarRating = React.forwardRef<HTMLDivElement, StarRatingProps>(\n  (\n    {\n      className,\n      size,\n      variant,\n      rating,\n      maxRating = 5,\n      reviewCount,\n      showEmpty = true,\n      ...props\n    },\n    ref\n  ) => {\n    const filledStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = maxRating - filledStars - (hasHalfStar ? 1 : 0);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(starRatingVariants({ size, variant }), className)}\n        {...props}\n      >\n        {Array.from({ length: filledStars }).map((_, i) => (\n          <Star\n            key={`filled-${i}`}\n            className={cn(\"fill-primary text-primary\", getStarSize(size))}\n          />\n        ))}\n\n        {hasHalfStar && (\n          <div className=\"relative\">\n            <Star className={cn(\"text-muted-foreground\", getStarSize(size))} />\n            <div\n              className=\"absolute inset-0 overflow-hidden\"\n              style={{ width: \"50%\" }}\n            >\n              <Star\n                className={cn(\"fill-primary text-primary\", getStarSize(size))}\n              />\n            </div>\n          </div>\n        )}\n\n        {showEmpty &&\n          Array.from({ length: emptyStars }).map((_, i) => (\n            <Star\n              key={`empty-${i}`}\n              className={cn(\"text-muted-foreground\", getStarSize(size))}\n            />\n          ))}\n\n        {typeof reviewCount !== \"undefined\" && (\n          <span\n            className={cn(\n              \"ml-1 font-medium\",\n              size === \"sm\"\n                ? \"text-xs\"\n                : size === \"lg\"\n                  ? \"text-base\"\n                  : \"text-sm\",\n              variant === \"muted\" ? \"text-muted-foreground\" : \"\"\n            )}\n          >\n            ({reviewCount})\n          </span>\n        )}\n      </div>\n    );\n  }\n);\nStarRating.displayName = \"StarRating\";\n\nfunction getStarSize(size: \"sm\" | \"md\" | \"lg\" | null | undefined) {\n  switch (size) {\n    case \"sm\":\n      return \"h-3.5 w-3.5\";\n    case \"lg\":\n      return \"h-5 w-5\";\n    default:\n      return \"h-4 w-4\";\n  }\n}\n\nexport { StarRating };\n",
      "type": "registry:component"
    }
  ]
}